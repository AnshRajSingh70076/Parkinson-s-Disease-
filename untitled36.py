# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4VwWsHealK9f8r15ZvoqFaJjM8cPVbK
"""

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/parkinsons.data')

data.head()

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data.isnull().sum()

data2=data.copy()

data2.drop(['name'],axis=1,inplace=True)

check=data2.corr()

plt.figure(figsize=(10,8))
sns.heatmap(check)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression

X=data2.drop(['status'],axis=1)
y=data2['status']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

X_train.shape



scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

model=GaussianNB()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
accuracy=accuracy_score(y_test,y_pred)
print('Accuracy:',accuracy)

model2=RandomForestClassifier()
model2.fit(X_train,y_train)
y_pred2=model2.predict(X_test)
accuracy2=accuracy_score(y_test,y_pred2)
print('Accuracy:',accuracy2)

model3=LogisticRegression()
model3.fit(X_train,y_train)
y_pred3=model3.predict(X_test)
accuracy3=accuracy_score(y_test,y_pred3)
print('Accuracy:',accuracy3)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

model = Sequential([
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential([
    Dense(64, activation='relu', input_shape=(22,)),
    Dropout(0.5),
    Dense(32, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))

model.fit(X_train, y_train, epochs=150, batch_size=32, validation_split=0.2)